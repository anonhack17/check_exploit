import sys
import tkinter as tk
from tkinter import ttk
from tkinter import scrolledtext
import hashlib
import os
from exploits_list import exploits


def run_as_admin():
    import ctypes
    # Проверяем, является ли процесс администратором
    is_admin = ctypes.windll.shell32.IsUserAnAdmin()
    if not is_admin:
        # Перезапускаем программу с правами администратора
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)


class AntivirusGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Antivirus")

        self.explits = []

        self.root.configure(bg='gray')

        # Установка стиля с более темными цветами
        self.style = ttk.Style()
        self.style.theme_use("winnative")

        # Настройка цветов
        self.style.configure('TBody', foreground='black', background='gray')
        self.style.configure('TLabel', foreground='black', background='gray')
        self.style.configure('TButton', foreground='black', background='white')
        self.style.configure('TEntry', foreground='black', background='gray')

        self.directory_label = ttk.Label(root, text="Введите путь к директории:")
        self.directory_label.grid(row=0, column=0, columnspan=1, padx=5, pady=5)

        self.directory_entry = ttk.Entry(root, width=90)
        self.directory_entry.grid(row=0, column=4, columnspan=4, padx=5, pady=5)

        self.scan_button = ttk.Button(root, text="Сканировать", command=self.scan_directory)
        self.scan_button.grid(row=0, column=8, columnspan=4, padx=5, pady=5)

        self.console_label = ttk.Label(root, text="Логи:")
        self.console_label.grid(row=1, column=0, columnspan=1, padx=5, pady=5)
        self.console_text = scrolledtext.ScrolledText(root, width=90, height=15)
        self.console_text.grid(row=2, column=0, columnspan=12, padx=10, pady=10)

        self.result_label = ttk.Label(root, text="Результат:")
        self.result_label.grid(row=3, column=0, columnspan=1, padx=5, pady=5)
        self.result_text = scrolledtext.ScrolledText(root, width=90, height=10)
        self.result_text.grid(row=4, column=0, columnspan=12, padx=10, pady=10)
        self.result_text.config(fg="red")

        self.remove_button = ttk.Button(root, text="Удалить файлы с угрозами", command=self.remove_exploits)
        self.remove_button.grid(row=5, column=0, columnspan=12, padx=10, pady=10)

        self.del_label = ttk.Label(root, text="Удаленные:")
        self.del_label.grid(row=1, column=12, rowspan=1, padx=5, pady=5)
        self.del_text = scrolledtext.ScrolledText(root, width=40, height=31)
        self.del_text.grid(row=2, column=12, rowspan=6, padx=10, pady=10)
        self.del_text.config(fg="green")



    def __calculate_hash(self, file_path):
        # Функция для вычисления хеш-суммы файла (например, MD5)
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()


    def scan_directory(self):
        directory_path = self.directory_entry.get()
        known_signatures = set(exploits)

        self.result_text.delete(1.0, tk.END)

        for root, dirs, files in os.walk(directory_path):
            for file_name in files:
                file_path = os.path.join(root, file_name)
                file_hash = self.__calculate_hash(file_path)
                os.chmod(file_path, 0o666)
                if file_hash in known_signatures:
                    self.explits.append(f"Файл {file_path} обнаружен как вредоносный (сигнатура {file_hash})")
                # Выводим информацию о каждом файле в отдельное текстовое поле
                self.console_text.insert(tk.END, f"Файл {file_path}: сигнатура {file_hash}\n")
                self.root.update_idletasks()


        self.show_results()



    def remove_exploits(self):
        for exploit in self.explits:
            exploit_file = exploit.split(" ")[1]
            if os.path.exists(exploit_file):
                os.remove(exploit_file)
                self.del_text.insert(tk.END, f"Файл {exploit_file} удален\n")
            else:
                self.del_text.insert(tk.END, f"Файл {exploit_file} не существует\n")


    def show_results(self):
        self.result_text.insert(tk.END, f"Count of exploits '{len(self.explits)}'\n")
        for exp in self.explits:
            self.result_text.insert(tk.END, {exp})


if __name__ == "__main__":
    run_as_admin()
    root = tk.Tk()
    app = AntivirusGUI(root)
    root.mainloop()
